//c     помощью данной штуки мы говорим tsc что будем использовать более специализированный тип
//  as это утверждение типов которое необходимо когда у нас есть объект у которого необходимо использовать одно из свойств а в функции указан литеральный тип , пример снизу 
//as позволяет нам исоплзовать более узко специалищированные типы то есть литеральное значение числа от числа, литеральное значение строки от строки и тд и тп
var fetchData = function (url, method) {
    console.log(method);
};
var reqOption = {
    url: 'asd',
    method: 'GET'
};
fetchData(reqOption.url, reqOption.method); //это из за того что когда я создаю объект его свойтсва бывают не литеральных типов 
//то есть мы говорим tsc что мы знаем лучше что же будет внутри данной перменной и таким образом можем пройти данную ошибку но в случае если использовать не тот тип который мы указали через as то будет ошибка уже на продакшине
//as надо использовать только в функциях , если в ней как аргумент указан литеральный тип а перменная которая пришла хоть является переменной нужного типа и значения , но тип не литеральный поэтому и будет ошибка указана
var test2 = 'GET';
fetchData(reqOption.url, test2); //TSC   палит если as присваивается чему то нелогичному типо если унас есть какое то число то мы не сможем через as сказать что это строка , но если у нас строка то мы сможем сказать что это какой то литеральный тип строки
var number = 5;
var number2 = number; //тут ошибки нет поэтому надо следить за тем чтобы мы все парвильно писали в as 
//  внутри объектов обычно указываются обычные типы не литеральные при обозначние свойства объекта и для того чтобы указать литеральынй тип как раз таки моно использовать as
var testObj = {
    name: 'Akhmed',
    age: 25 //  но нельзя забывать что теперь менять данное свойсвто нельзя и при этом нужно праивльно использовать as 
};
//так же можно создавтаь объектный литерал с помощью as добавив его в конце и укзаав что он является const 
var testObj2 = {
    name: 'Akhmed2',
    age: 25
};
//!!!вместо as можно использовать угловые скобки , но он реже и его нельзя использовать в react. Работает так что сначала мы указываем тип в скобках а потом сразу переменную  
fetchData(reqOption.url, test2);
var box = document.querySelector('.box');
//нам придется указать as HTMLElement так как без него у перпменной будет юнион тип с значением возможно элмемент или null и из за того что он будет думать что может быть null он не даст использовать такие свойства элмементов как style
var box2 = document.querySelector('.box2');
//говорит что у Element нет метода стайл но есть другие
// box2.style  не получается достать
box2 === null || box2 === void 0 ? void 0 : box2.classList; //из за того что element это более обширное значение какого то элемента у которого возможно нет стиля
console.log(box.style);
///для работы с более узконаправленными объектами дом дерева нам необхдимо указывать их типы при получение из дом дерева! пример снизу
var input = document.querySelector('input');
var number22 = +input.value; //тут может быть указана ошибка если такого ёлемента не будет 
console.log(number22);


