/*-------------Первоначально скажем что в массивах TSC пытаются максимально сузить типизацию, то есть всем элементам одного массива пытаются дать одинкаывый тип, если этого не получается то используется тип any[] , так же для работы с массивами используют кортежи (как для объектов интерфейсы-------------------*/
/// Указано что данная переменная является массивом внутри которго строго типизированные элементы под строку, теперь вытаскивая элементы с данного массива, автоматом получится строка и нельзя изменить элемент массива на другой тип (док на 6)
var arrayStr = ['a', 'any', 'bbbbb'];
// arrayStr[2] = 2;
/*-------------Существуют массивы в массивах для того чтобы уазать что внутри массива будет находиться другой массив необходимо указать две скобки string[][] в данном случае указывается что во внутреннем массиве элементы будут типа строки , но при map необходимо будет вновь указывать что элемент явяется строкой так как в map можно менять тип если он не указан-------------------*/
var VlojArray = [[1, 2, 4, 0], [10, 12]];
var numberAr = VlojArray[0]
    .map(function (num, index) { return num + index; });
//  .map(num => { return '123' } );
console.log(numberAr);



const arrayTest = [1, 2, 3];

const [a , ...b ] = arrayTest;
console.log(a , b);

const objTest = { 
    name: `Akhmed`, 
    age: 25,
    message : { 
        er: 'err',
        ok: 'ok'
    }
}

const {name , age , message: { er:mes1 , ok:mes2 }} = objTest

console.log(mes1 , mes2);